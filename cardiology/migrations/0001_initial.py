# Generated by Django 5.1.4 on 2025-10-13 16:33

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0008_usercompanypermission_can_access_billing_health_and_more"),
        ("medical_records", "0001_initial"),
        ("payroll", "0003_laboratoryspecialty_alter_healthcarerole_category_and_more"),
        ("third_parties", "0004_thirdparty_birth_date_thirdparty_gender"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CardiologyConsultation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("consultation_number", models.CharField(max_length=50, unique=True)),
                (
                    "consultation_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "consultation_type",
                    models.CharField(
                        choices=[
                            ("first_time", "Primera Vez"),
                            ("follow_up", "Control"),
                            ("post_surgical", "Post-Quirúrgico"),
                            ("pre_surgical", "Pre-Quirúrgico"),
                            ("emergency", "Urgencia"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Programada"),
                            ("in_progress", "En Curso"),
                            ("completed", "Completada"),
                            ("cancelled", "Cancelada"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                ("chief_complaint", models.TextField(help_text="Motivo de consulta")),
                (
                    "cardiovascular_history",
                    models.TextField(
                        blank=True, help_text="Antecedentes cardiovasculares"
                    ),
                ),
                (
                    "has_hypertension",
                    models.BooleanField(default=False, verbose_name="Hipertensión"),
                ),
                (
                    "has_diabetes",
                    models.BooleanField(default=False, verbose_name="Diabetes"),
                ),
                (
                    "has_dyslipidemia",
                    models.BooleanField(default=False, verbose_name="Dislipidemia"),
                ),
                (
                    "is_smoker",
                    models.BooleanField(default=False, verbose_name="Fumador"),
                ),
                (
                    "has_family_history_cvd",
                    models.BooleanField(
                        default=False, verbose_name="Antecedente familiar de ECV"
                    ),
                ),
                (
                    "is_sedentary",
                    models.BooleanField(default=False, verbose_name="Sedentarismo"),
                ),
                (
                    "has_obesity",
                    models.BooleanField(default=False, verbose_name="Obesidad"),
                ),
                ("blood_pressure_systolic", models.IntegerField(blank=True, null=True)),
                (
                    "blood_pressure_diastolic",
                    models.IntegerField(blank=True, null=True),
                ),
                ("heart_rate", models.IntegerField(blank=True, null=True)),
                ("oxygen_saturation", models.IntegerField(blank=True, null=True)),
                (
                    "cardiac_auscultation",
                    models.TextField(blank=True, help_text="Auscultación cardíaca"),
                ),
                (
                    "peripheral_pulses",
                    models.TextField(blank=True, help_text="Pulsos periféricos"),
                ),
                ("edema_presence", models.BooleanField(default=False)),
                ("edema_description", models.CharField(blank=True, max_length=200)),
                ("primary_diagnosis_code", models.CharField(blank=True, max_length=10)),
                (
                    "primary_diagnosis_description",
                    models.CharField(blank=True, max_length=500),
                ),
                ("secondary_diagnoses", models.TextField(blank=True)),
                ("treatment_plan", models.TextField(blank=True)),
                ("medications_prescribed", models.TextField(blank=True)),
                (
                    "ecg_ordered",
                    models.BooleanField(default=False, verbose_name="ECG ordenado"),
                ),
                (
                    "echo_ordered",
                    models.BooleanField(
                        default=False, verbose_name="Ecocardiograma ordenado"
                    ),
                ),
                (
                    "stress_test_ordered",
                    models.BooleanField(
                        default=False, verbose_name="Prueba de esfuerzo ordenada"
                    ),
                ),
                (
                    "holter_ordered",
                    models.BooleanField(default=False, verbose_name="Holter ordenado"),
                ),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                ("follow_up_instructions", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cardiologist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="cardiology_consultations",
                        to="payroll.employee",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.company"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="cardio_consults_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "medical_record",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="medical_records.medicalrecord",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"is_patient": True, "type": "customer"},
                        on_delete=django.db.models.deletion.PROTECT,
                        to="third_parties.thirdparty",
                    ),
                ),
            ],
            options={
                "verbose_name": "Consulta de Cardiología",
                "verbose_name_plural": "Consultas de Cardiología",
                "db_table": "cardiology_consultations",
                "ordering": ["-consultation_date"],
            },
        ),
        migrations.CreateModel(
            name="CardiovascularRiskAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("assessment_number", models.CharField(max_length=50, unique=True)),
                (
                    "assessment_date",
                    models.DateField(default=django.utils.timezone.now),
                ),
                ("age", models.IntegerField()),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Masculino"), ("F", "Femenino")], max_length=10
                    ),
                ),
                ("systolic_blood_pressure", models.IntegerField()),
                (
                    "is_on_antihypertensive_treatment",
                    models.BooleanField(default=False),
                ),
                (
                    "total_cholesterol",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Colesterol total (mg/dL)",
                        max_digits=5,
                    ),
                ),
                (
                    "hdl_cholesterol",
                    models.DecimalField(
                        decimal_places=2, help_text="HDL (mg/dL)", max_digits=5
                    ),
                ),
                (
                    "ldl_cholesterol",
                    models.DecimalField(
                        decimal_places=2, help_text="LDL (mg/dL)", max_digits=5
                    ),
                ),
                (
                    "triglycerides",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Triglicéridos (mg/dL)",
                        max_digits=6,
                    ),
                ),
                (
                    "fasting_glucose",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Glucosa en ayunas (mg/dL)",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "hba1c",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="HbA1c (%)",
                        max_digits=4,
                        null=True,
                    ),
                ),
                ("is_diabetic", models.BooleanField(default=False)),
                ("is_smoker", models.BooleanField(default=False)),
                (
                    "score_type",
                    models.CharField(
                        choices=[
                            ("framingham", "Framingham"),
                            ("procam", "PROCAM"),
                            ("score", "SCORE"),
                            ("reynolds", "Reynolds"),
                        ],
                        default="framingham",
                        max_length=30,
                    ),
                ),
                (
                    "risk_score",
                    models.DecimalField(
                        decimal_places=2, help_text="Puntaje de riesgo", max_digits=5
                    ),
                ),
                (
                    "risk_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="% de riesgo a 10 años",
                        max_digits=5,
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Bajo"),
                            ("moderate", "Moderado"),
                            ("high", "Alto"),
                            ("very_high", "Muy Alto"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "target_ldl",
                    models.DecimalField(
                        decimal_places=2, help_text="LDL objetivo (mg/dL)", max_digits=5
                    ),
                ),
                (
                    "target_blood_pressure",
                    models.CharField(
                        help_text="PA objetivo (ej: 130/80)", max_length=20
                    ),
                ),
                ("lifestyle_recommendations", models.TextField()),
                ("pharmacological_recommendations", models.TextField(blank=True)),
                ("follow_up_plan", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cardiology_consultation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="risk_assessments",
                        to="cardiology.cardiologyconsultation",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.company"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="cvd_risk_assessments_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "evaluated_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="risk_assessments_performed",
                        to="payroll.employee",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"is_patient": True, "type": "customer"},
                        on_delete=django.db.models.deletion.PROTECT,
                        to="third_parties.thirdparty",
                    ),
                ),
            ],
            options={
                "verbose_name": "Evaluación de Riesgo Cardiovascular",
                "verbose_name_plural": "Evaluaciones de Riesgo Cardiovascular",
                "db_table": "cardiology_risk_assessments",
                "ordering": ["-assessment_date"],
            },
        ),
        migrations.CreateModel(
            name="Echocardiogram",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("echo_number", models.CharField(max_length=50, unique=True)),
                ("echo_date", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "echo_type",
                    models.CharField(
                        choices=[
                            ("transthoracic", "Transtorácico (TTE)"),
                            ("transesophageal", "Transesofágico (TEE)"),
                            ("stress", "Estrés"),
                            ("fetal", "Fetal"),
                        ],
                        default="transthoracic",
                        max_length=30,
                    ),
                ),
                (
                    "height_cm",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "weight_kg",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "bsa_m2",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Superficie corporal (m²)",
                        max_digits=4,
                        null=True,
                    ),
                ),
                ("blood_pressure_systolic", models.IntegerField(blank=True, null=True)),
                (
                    "blood_pressure_diastolic",
                    models.IntegerField(blank=True, null=True),
                ),
                ("heart_rate", models.IntegerField(blank=True, null=True)),
                (
                    "lv_end_diastolic_diameter",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Diámetro diastólico VI (mm)",
                        max_digits=5,
                        null=True,
                        verbose_name="DDVI",
                    ),
                ),
                (
                    "lv_end_systolic_diameter",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Diámetro sistólico VI (mm)",
                        max_digits=5,
                        null=True,
                        verbose_name="DSVI",
                    ),
                ),
                (
                    "lv_end_diastolic_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Volumen diastólico VI (ml)",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "lv_end_systolic_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Volumen sistólico VI (ml)",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "ejection_fraction",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Fracción de eyección VI (%)",
                        max_digits=5,
                        null=True,
                        verbose_name="FEVI",
                    ),
                ),
                (
                    "fractional_shortening",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Acortamiento fraccional (%)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "ivs_thickness",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Grosor tabique interventricular (mm)",
                        max_digits=5,
                        null=True,
                        verbose_name="SIV",
                    ),
                ),
                (
                    "posterior_wall_thickness",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Grosor pared posterior (mm)",
                        max_digits=5,
                        null=True,
                        verbose_name="PP",
                    ),
                ),
                (
                    "left_atrium_diameter",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Diámetro aurícula izquierda (mm)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "left_atrium_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Volumen aurícula izquierda (ml)",
                        max_digits=6,
                        null=True,
                    ),
                ),
                ("mitral_valve_normal", models.BooleanField(default=True)),
                ("mitral_stenosis", models.BooleanField(default=False)),
                (
                    "mitral_regurgitation",
                    models.CharField(
                        blank=True,
                        help_text="Grado: leve/moderada/severa",
                        max_length=20,
                    ),
                ),
                ("aortic_valve_normal", models.BooleanField(default=True)),
                ("aortic_stenosis", models.BooleanField(default=False)),
                ("aortic_regurgitation", models.CharField(blank=True, max_length=20)),
                ("tricuspid_valve_normal", models.BooleanField(default=True)),
                (
                    "tricuspid_regurgitation",
                    models.CharField(blank=True, max_length=20),
                ),
                ("pulmonary_valve_normal", models.BooleanField(default=True)),
                (
                    "pulmonary_regurgitation",
                    models.CharField(blank=True, max_length=20),
                ),
                (
                    "estimated_rvsp",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Presión sistólica VD estimada (mmHg)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                ("pericardial_effusion", models.BooleanField(default=False)),
                (
                    "pericardial_effusion_description",
                    models.CharField(blank=True, max_length=300),
                ),
                ("thrombus_present", models.BooleanField(default=False)),
                ("thrombus_description", models.CharField(blank=True, max_length=300)),
                (
                    "findings",
                    models.TextField(
                        help_text="Hallazgos ecocardiográficos detallados"
                    ),
                ),
                ("conclusion", models.TextField()),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("normal", "Normal"),
                            ("abnormal", "Anormal"),
                            ("borderline", "Limítrofe"),
                        ],
                        default="normal",
                        max_length=20,
                    ),
                ),
                ("recommendations", models.TextField(blank=True)),
                (
                    "echo_images",
                    models.FileField(
                        blank=True, null=True, upload_to="cardiology/echo/%Y/%m/"
                    ),
                ),
                (
                    "echo_video",
                    models.FileField(
                        blank=True, null=True, upload_to="cardiology/echo/video/%Y/%m/"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cardiology_consultation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="echocardiograms",
                        to="cardiology.cardiologyconsultation",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.company"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="echos_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "interpreted_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="echos_interpreted",
                        to="payroll.employee",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"is_patient": True, "type": "customer"},
                        on_delete=django.db.models.deletion.PROTECT,
                        to="third_parties.thirdparty",
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="echos_performed",
                        to="payroll.employee",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ecocardiograma",
                "verbose_name_plural": "Ecocardiogramas",
                "db_table": "cardiology_echocardiograms",
                "ordering": ["-echo_date"],
            },
        ),
        migrations.CreateModel(
            name="Electrocardiogram",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("ecg_number", models.CharField(max_length=50, unique=True)),
                ("ecg_date", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "ecg_type",
                    models.CharField(
                        choices=[
                            ("resting", "Reposo"),
                            ("stress", "Esfuerzo"),
                            ("holter", "Holter"),
                            ("event_monitor", "Monitor de Eventos"),
                        ],
                        default="resting",
                        max_length=30,
                    ),
                ),
                (
                    "heart_rate",
                    models.IntegerField(
                        help_text="Frecuencia cardíaca (lpm)",
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "pr_interval",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Intervalo PR (ms)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "qrs_duration",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Duración QRS (ms)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "qt_interval",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Intervalo QT (ms)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "qtc_interval",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="QTc corregido (ms)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "p_wave_axis",
                    models.IntegerField(
                        blank=True, help_text="Eje de onda P (grados)", null=True
                    ),
                ),
                (
                    "qrs_axis",
                    models.IntegerField(
                        blank=True, help_text="Eje QRS (grados)", null=True
                    ),
                ),
                (
                    "t_wave_axis",
                    models.IntegerField(
                        blank=True, help_text="Eje de onda T (grados)", null=True
                    ),
                ),
                (
                    "rhythm",
                    models.CharField(
                        choices=[
                            ("sinus_rhythm", "Ritmo Sinusal"),
                            ("atrial_fibrillation", "Fibrilación Auricular"),
                            ("atrial_flutter", "Flutter Auricular"),
                            ("svt", "Taquicardia Supraventricular"),
                            ("ventricular_tachycardia", "Taquicardia Ventricular"),
                            ("bradycardia", "Bradicardia"),
                            ("other", "Otro"),
                        ],
                        default="sinus_rhythm",
                        max_length=30,
                    ),
                ),
                ("rhythm_description", models.CharField(blank=True, max_length=300)),
                (
                    "findings",
                    models.TextField(help_text="Hallazgos electrocardiográficos"),
                ),
                (
                    "has_st_changes",
                    models.BooleanField(
                        default=False, verbose_name="Cambios en el segmento ST"
                    ),
                ),
                (
                    "has_t_wave_changes",
                    models.BooleanField(
                        default=False, verbose_name="Cambios en onda T"
                    ),
                ),
                (
                    "has_q_waves",
                    models.BooleanField(
                        default=False, verbose_name="Ondas Q patológicas"
                    ),
                ),
                (
                    "has_hypertrophy",
                    models.BooleanField(default=False, verbose_name="Hipertrofia"),
                ),
                (
                    "has_conduction_block",
                    models.BooleanField(
                        default=False, verbose_name="Bloqueo de conducción"
                    ),
                ),
                (
                    "interpretation",
                    models.TextField(help_text="Interpretación clínica"),
                ),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("normal", "Normal"),
                            ("abnormal", "Anormal"),
                            ("borderline", "Limítrofe"),
                        ],
                        default="normal",
                        max_length=20,
                    ),
                ),
                ("conclusion", models.TextField()),
                ("recommendations", models.TextField(blank=True)),
                (
                    "ecg_file",
                    models.FileField(
                        blank=True, null=True, upload_to="cardiology/ecg/%Y/%m/"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cardiology_consultation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="electrocardiograms",
                        to="cardiology.cardiologyconsultation",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.company"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ecgs_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "interpreted_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ecgs_interpreted",
                        to="payroll.employee",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"is_patient": True, "type": "customer"},
                        on_delete=django.db.models.deletion.PROTECT,
                        to="third_parties.thirdparty",
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ecgs_performed",
                        to="payroll.employee",
                    ),
                ),
            ],
            options={
                "verbose_name": "Electrocardiograma",
                "verbose_name_plural": "Electrocardiogramas",
                "db_table": "cardiology_electrocardiograms",
                "ordering": ["-ecg_date"],
            },
        ),
        migrations.CreateModel(
            name="HolterMonitoring",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("holter_number", models.CharField(max_length=50, unique=True)),
                ("start_datetime", models.DateTimeField()),
                ("end_datetime", models.DateTimeField()),
                (
                    "duration",
                    models.CharField(
                        choices=[
                            ("24h", "24 horas"),
                            ("48h", "48 horas"),
                            ("72h", "72 horas"),
                            ("7d", "7 días"),
                        ],
                        default="24h",
                        max_length=10,
                    ),
                ),
                ("predominant_rhythm", models.CharField(max_length=100)),
                (
                    "total_beats",
                    models.IntegerField(help_text="Total de latidos en el período"),
                ),
                ("min_heart_rate", models.IntegerField(help_text="FC mínima")),
                ("min_hr_time", models.TimeField(blank=True, null=True)),
                ("max_heart_rate", models.IntegerField(help_text="FC máxima")),
                ("max_hr_time", models.TimeField(blank=True, null=True)),
                ("average_heart_rate", models.IntegerField(help_text="FC promedio")),
                (
                    "total_supraventricular_ectopics",
                    models.IntegerField(
                        default=0, help_text="Extrasístoles supraventriculares"
                    ),
                ),
                ("supraventricular_couplets", models.IntegerField(default=0)),
                ("supraventricular_runs", models.IntegerField(default=0)),
                ("atrial_fibrillation_episodes", models.IntegerField(default=0)),
                (
                    "svt_episodes",
                    models.IntegerField(
                        default=0, help_text="Episodios de taquicardia supraventricular"
                    ),
                ),
                (
                    "total_ventricular_ectopics",
                    models.IntegerField(
                        default=0, help_text="Extrasístoles ventriculares"
                    ),
                ),
                ("ventricular_couplets", models.IntegerField(default=0)),
                ("ventricular_runs", models.IntegerField(default=0)),
                ("ventricular_tachycardia_episodes", models.IntegerField(default=0)),
                (
                    "longest_pause_duration",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Pausa más larga (segundos)",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "significant_pauses_count",
                    models.IntegerField(default=0, help_text="Pausas > 2.0 segundos"),
                ),
                (
                    "sdnn",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="SDNN (ms) - Desviación estándar NN",
                        max_digits=7,
                        null=True,
                    ),
                ),
                (
                    "sdann",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="SDANN (ms)",
                        max_digits=7,
                        null=True,
                    ),
                ),
                (
                    "rmssd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="RMSSD (ms)",
                        max_digits=7,
                        null=True,
                    ),
                ),
                ("st_segment_changes", models.BooleanField(default=False)),
                ("st_elevation_episodes", models.IntegerField(default=0)),
                ("st_depression_episodes", models.IntegerField(default=0)),
                ("st_changes_description", models.TextField(blank=True)),
                (
                    "patient_symptoms_diary",
                    models.TextField(
                        blank=True, help_text="Diario de síntomas del paciente"
                    ),
                ),
                (
                    "symptom_rhythm_correlation",
                    models.TextField(
                        blank=True, help_text="Correlación síntomas-ritmo"
                    ),
                ),
                ("findings", models.TextField(help_text="Hallazgos del Holter")),
                ("interpretation", models.TextField()),
                ("conclusion", models.TextField()),
                ("recommendations", models.TextField(blank=True)),
                (
                    "holter_report",
                    models.FileField(
                        blank=True, null=True, upload_to="cardiology/holter/%Y/%m/"
                    ),
                ),
                (
                    "raw_data_file",
                    models.FileField(
                        blank=True, null=True, upload_to="cardiology/holter/data/%Y/%m/"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cardiology_consultation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="holter_monitorings",
                        to="cardiology.cardiologyconsultation",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.company"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="holters_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "interpreted_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="holters_interpreted",
                        to="payroll.employee",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"is_patient": True, "type": "customer"},
                        on_delete=django.db.models.deletion.PROTECT,
                        to="third_parties.thirdparty",
                    ),
                ),
                (
                    "placed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="holters_placed",
                        to="payroll.employee",
                    ),
                ),
            ],
            options={
                "verbose_name": "Holter",
                "verbose_name_plural": "Holter Monitorings",
                "db_table": "cardiology_holter_monitoring",
                "ordering": ["-start_datetime"],
            },
        ),
        migrations.CreateModel(
            name="StressTest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("test_number", models.CharField(max_length=50, unique=True)),
                ("test_date", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "protocol_used",
                    models.CharField(
                        choices=[
                            ("bruce", "Bruce"),
                            ("modified_bruce", "Bruce Modificado"),
                            ("naughton", "Naughton"),
                            ("ellestad", "Ellestad"),
                            ("ramp", "Rampa"),
                        ],
                        default="bruce",
                        max_length=30,
                    ),
                ),
                (
                    "baseline_bp_systolic",
                    models.IntegerField(help_text="PA sistólica basal"),
                ),
                (
                    "baseline_bp_diastolic",
                    models.IntegerField(help_text="PA diastólica basal"),
                ),
                ("baseline_heart_rate", models.IntegerField(help_text="FC basal")),
                (
                    "exercise_duration_minutes",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Duración del ejercicio",
                        max_digits=5,
                    ),
                ),
                (
                    "max_heart_rate_achieved",
                    models.IntegerField(help_text="FC máxima alcanzada"),
                ),
                (
                    "max_heart_rate_predicted",
                    models.IntegerField(help_text="FC máxima predicha (220-edad)"),
                ),
                (
                    "percentage_max_hr",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="% FC máxima alcanzada",
                        max_digits=5,
                    ),
                ),
                (
                    "max_bp_systolic",
                    models.IntegerField(help_text="PA sistólica máxima"),
                ),
                (
                    "max_bp_diastolic",
                    models.IntegerField(help_text="PA diastólica máxima"),
                ),
                (
                    "max_mets_achieved",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="METs alcanzados",
                        max_digits=5,
                        null=True,
                    ),
                ),
                ("max_stage_reached", models.CharField(blank=True, max_length=50)),
                (
                    "stop_reason",
                    models.CharField(
                        choices=[
                            ("target_heart_rate", "Frecuencia cardíaca objetivo"),
                            ("fatigue", "Fatiga"),
                            ("chest_pain", "Dolor torácico"),
                            ("dyspnea", "Disnea"),
                            ("st_changes", "Cambios ST"),
                            ("arrhythmia", "Arritmia"),
                            ("blood_pressure", "Presión arterial anormal"),
                            ("patient_request", "Solicitud del paciente"),
                        ],
                        max_length=30,
                    ),
                ),
                ("stop_reason_details", models.TextField(blank=True)),
                ("chest_pain_during_test", models.BooleanField(default=False)),
                ("dyspnea_during_test", models.BooleanField(default=False)),
                ("dizziness_during_test", models.BooleanField(default=False)),
                ("symptoms_description", models.TextField(blank=True)),
                ("st_segment_changes", models.BooleanField(default=False)),
                ("st_segment_description", models.TextField(blank=True)),
                ("arrhythmias_detected", models.BooleanField(default=False)),
                ("arrhythmias_description", models.TextField(blank=True)),
                (
                    "recovery_heart_rate_1min",
                    models.IntegerField(
                        blank=True, help_text="FC 1 min post-ejercicio", null=True
                    ),
                ),
                ("recovery_bp_systolic", models.IntegerField(blank=True, null=True)),
                ("recovery_bp_diastolic", models.IntegerField(blank=True, null=True)),
                (
                    "result",
                    models.CharField(
                        choices=[
                            ("negative", "Negativa para isquemia"),
                            ("positive", "Positiva para isquemia"),
                            ("non_diagnostic", "No diagnóstica"),
                            ("indeterminate", "Indeterminada"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "interpretation",
                    models.TextField(help_text="Interpretación de la prueba"),
                ),
                ("conclusion", models.TextField()),
                ("recommendations", models.TextField(blank=True)),
                (
                    "test_report",
                    models.FileField(
                        blank=True, null=True, upload_to="cardiology/stress_test/%Y/%m/"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cardiology_consultation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stress_tests",
                        to="cardiology.cardiologyconsultation",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.company"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stress_tests_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        limit_choices_to={"is_patient": True, "type": "customer"},
                        on_delete=django.db.models.deletion.PROTECT,
                        to="third_parties.thirdparty",
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stress_tests_performed",
                        to="payroll.employee",
                    ),
                ),
                (
                    "supervised_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stress_tests_supervised",
                        to="payroll.employee",
                    ),
                ),
            ],
            options={
                "verbose_name": "Prueba de Esfuerzo",
                "verbose_name_plural": "Pruebas de Esfuerzo",
                "db_table": "cardiology_stress_tests",
                "ordering": ["-test_date"],
            },
        ),
    ]
